// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// sequencer //
// --------- //

#define sequencer_wrap_target 0
#define sequencer_wrap 6

static const uint16_t sequencer_program_instructions[] = {
            //     .wrap_target
    0xef81, //  0: set    pindirs, 1      side 0 [15]
    0xa120, //  1: mov    x, pins         side 0 [1] 
    0x0125, //  2: jmp    !x, 5           side 0 [1] 
    0xa542, //  3: nop                    side 0 [5] 
    0x0501, //  4: jmp    1               side 0 [5] 
    0xb542, //  5: nop                    side 1 [5] 
    0x1501, //  6: jmp    1               side 1 [5] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sequencer_program = {
    .instructions = sequencer_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config sequencer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sequencer_wrap_target, offset + sequencer_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void sequencer_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
  // 1. Define a config object
  pio_gpio_init(pio, pin);
  pio_sm_config config = sequencer_program_get_default_config(offset);
  // 2. Set and initialize the output pins
  pio_sm_set_in_pins(pio, sm, 21);
  sm_config_set_sideset_pins(&config, pin);
;   sm_config_set_set_pins(&config, pin, 1);
  // 
  int cycles_per_bit = 16;
  float div=clock_get_hz(clk_sys) / (freq*cycles_per_bit);
  sm_config_set_clkdiv(&config, div);
  // 3. Apply the configuration & activate the State Machine
  pio_sm_init(pio, sm, offset, &config);
  pio_sm_set_enabled(pio, sm, true);
}

#endif

